# serializer version: 1
# name: test_conversation_entity
  list([
    dict({
      'content': '''
        This smart home is controlled by Home Assistant.
        An overview of the areas and the devices in this smart home:
        Answer the user's questions about the world truthfully.
        If the user wants to control a device, reject the request and suggest using the Home Assistant app.
      ''',
      'role': 'system',
    }),
    dict({
      'content': 'hello',
      'role': 'user',
    }),
    dict({
      'content': 'Hello, how can I help you?',
      'role': 'assistant',
    }),
  ])
# ---
# name: test_conversation_entity[None]
  list([
    dict({
      'content': '''
        This smart home is controlled by Home Assistant.
        An overview of the areas and the devices in this smart home:
        Answer the user's questions about the world truthfully.
        If the user wants to control a device, reject the request and suggest using the Home Assistant app.
      ''',
      'role': 'system',
    }),
    dict({
      'content': 'hello',
      'role': 'user',
    }),
    dict({
      'content': 'Hello, how can I help you?',
      'role': 'assistant',
    }),
  ])
# ---
# name: test_conversation_entity[config_entry_options0-None]
  list([
    dict({
      'content': '''
        Answer in plain text. Keep it simple and to the point.
        Call the intent tools to control Home Assistant. Just pass the name to the intent.
      ''',
      'role': 'system',
    }),
    dict({
      'content': 'hello',
      'role': 'user',
    }),
    ChatCompletionMessage(content='Hello, how can I help you?', role='assistant', function_call=None, tool_calls=None),
  ])
# ---
# name: test_conversation_entity[config_entry_options0-conversation.mock_title]
  list([
    dict({
      'content': '''
        Answer in plain text. Keep it simple and to the point.
        Call the intent tools to control Home Assistant. Just pass the name to the intent.
      ''',
      'role': 'system',
    }),
    dict({
      'content': 'hello',
      'role': 'user',
    }),
    ChatCompletionMessage(content='Hello, how can I help you?', role='assistant', function_call=None, tool_calls=None),
  ])
# ---
# name: test_conversation_entity[config_entry_options1-None]
  list([
    dict({
      'content': '''
        Answer in plain text. Keep it simple and to the point.
        Call the intent tools to control Home Assistant. Just pass the name to the intent.
      ''',
      'role': 'system',
    }),
    dict({
      'content': 'hello',
      'role': 'user',
    }),
    ChatCompletionMessage(content='Hello, how can I help you?', role='assistant', function_call=None, tool_calls=None),
  ])
# ---
# name: test_conversation_entity[config_entry_options1-conversation.mock_title]
  list([
    dict({
      'content': '''
        Answer in plain text. Keep it simple and to the point.
        Call the intent tools to control Home Assistant. Just pass the name to the intent.
      ''',
      'role': 'system',
    }),
    dict({
      'content': 'hello',
      'role': 'user',
    }),
    ChatCompletionMessage(content='Hello, how can I help you?', role='assistant', function_call=None, tool_calls=None),
  ])
# ---
# name: test_conversation_entity[conversation.mock_title]
  list([
    dict({
      'content': '''
        This smart home is controlled by Home Assistant.
        An overview of the areas and the devices in this smart home:
        Answer the user's questions about the world truthfully.
        If the user wants to control a device, reject the request and suggest using the Home Assistant app.
      ''',
      'role': 'system',
    }),
    dict({
      'content': 'hello',
      'role': 'user',
    }),
    dict({
      'content': 'Hello, how can I help you?',
      'role': 'assistant',
    }),
  ])
# ---
# name: test_unknown_hass_api
  dict({
    'conversation_id': None,
    'response': IntentResponse(
      card=dict({
      }),
      error_code=<IntentResponseErrorCode.UNKNOWN: 'unknown'>,
      failed_results=list([
      ]),
      intent=None,
      intent_targets=list([
      ]),
      language='en',
      matched_states=list([
      ]),
      reprompt=dict({
      }),
      response_type=<IntentResponseType.ERROR: 'error'>,
      speech=dict({
        'plain': dict({
          'extra_data': None,
          'speech': 'Error preparing LLM API: API non-existing not found',
        }),
      }),
      speech_slots=dict({
      }),
      success_results=list([
      ]),
      unmatched_states=list([
      ]),
    ),
  })
# ---
